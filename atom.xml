<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lixpng</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="git@github.com:lixpng/lixpng.github.io.git/"/>
  <updated>2018-11-22T14:50:01.126Z</updated>
  <id>git@github.com:lixpng/lixpng.github.io.git/</id>
  
  <author>
    <name>Lixueping</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于递归和尾调用优化</title>
    <link href="git@github.com:lixpng/lixpng.github.io.git/2018/11/22/2018-11-21/"/>
    <id>git@github.com:lixpng/lixpng.github.io.git/2018/11/22/2018-11-21/</id>
    <published>2018-11-22T14:28:22.000Z</published>
    <updated>2018-11-22T14:50:01.126Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、-什么是递归"><a href="#一、-什么是递归" class="headerlink" title="一、 什么是递归"></a>一、 什么是递归</h3><p>递归（英语：Recursion），又译为递回，在数学与计算机科学中，是指在函数的定义中使用函数自身的方法。<br><a id="more"></a></p><h3 id="二、-递归的分类"><a href="#二、-递归的分类" class="headerlink" title="二、 递归的分类"></a>二、 递归的分类</h3><ol><li><p>头递归<br>在接近方法开始的地方调用自身，一般我们写的大部分是<strong>头递归</strong>，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n &lt;= <span class="number">2</span> ? <span class="number">1</span> : fibonacci(n<span class="number">-1</span>) + fibonacci(n<span class="number">-2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>互递归<br>指两个数学或计算机对象如函数或数据类型互相定义，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isOdd</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isEven(n<span class="number">-1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEven</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isOdd(n<span class="number">-1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>尾递归<br>是在结尾处执行的递归调用，是要处理的最后一行代码，前面两种递归都可能会引起函数堆栈的溢出，但对于一些做了<strong>尾递归优化</strong>的语言，尾递归是不会引起栈溢出的。如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params">n, total=<span class="number">1</span>, prev=<span class="number">1</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n &lt;= <span class="number">2</span> ? total : fibonacci(n<span class="number">-1</span>, prev+total, total)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="三、尾调用优化"><a href="#三、尾调用优化" class="headerlink" title="三、尾调用优化"></a>三、尾调用优化</h3><p><code>js</code> 在执行的时候会有一个函数调用栈，当运行的程序从当前函数调用另外一个函数时，就会为被调用的函数建立一个<code>栈帧</code>，这个栈帧称为<code>当前帧</code>，而原来的函数也有一个栈帧，被称为<code>调用帧</code>，栈帧里存储的都是当前函数的局部变量，当函数执行完毕时就会释放掉<code>当前帧</code>，将程序运行权利交给此时栈顶的栈帧。如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> one(a); <span class="comment">// 此处没有 return 是不能触发尾调用优化的，会隐形地 return undefind</span></span><br><span class="line">&#125;</span><br><span class="line">two();</span><br></pre></td></tr></table></figure></p><p>上述函数的调用栈变化大概如下：<br>第一步，刚开始时，函数执行栈中变量为：  </p><blockquote><p>&nbsp;-————-<br>|two: function |<br>&nbsp;-————-<br>|one: function |<br>&nbsp;-————-  </p></blockquote><p>第二步，当 <code>two</code> 开始执行，进入到 <code>two</code> 的执行环境中， <code>a</code> 变量入栈：  </p><blockquote><p>&nbsp;-————-<br>|a: 1 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>&nbsp;-————-<br>|two: function |<br>&nbsp;-————-<br>|one: function |<br>&nbsp;-————-  </p></blockquote><p>第三步，调用 <code>one</code> ，<code>x=1</code> 入栈：  </p><blockquote><p>&nbsp;-————-<br>|x: 1 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>&nbsp;-————-<br>|a: 1 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>&nbsp;-————-<br>|two: function |<br>&nbsp;-————-<br>|one: function |<br>&nbsp;-————-  </p></blockquote><p>第四步，<code>one</code> 执行完毕，释放栈帧。  </p><blockquote><p>&nbsp;-————-<br>|a: 1 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>&nbsp;-————-<br>|two: function |<br>&nbsp;-————-<br>|one: function |<br>&nbsp;-————-    </p></blockquote><p>第五步，<code>two</code> 执行完毕，释放栈帧。  </p><blockquote><p>&nbsp;-————-<br>|two: function |<br>&nbsp;-————-<br>|one: function |<br>&nbsp;-————-  </p></blockquote><p>以上是没有做<strong>尾递归优化</strong>时的执行顺序  </p><p>但若引擎（如v8等）实现了尾调用优化，且在严格模式下，就在第三步中会先把 <code>two</code> 的栈帧释放，把 <code>a</code> 出栈，然后再创建 <code>one</code> 的栈帧，把 <code>x</code> 进栈，因为此时已经不会再用到 <code>two</code> 的调用位置、内部变量，无需保留 <code>two</code> 的栈帧了，这样就能减少调用栈的长度，从而在进行尾递归时就能防止栈溢出。</p><h3 id="四-能触发尾调用优化的方法："><a href="#四-能触发尾调用优化的方法：" class="headerlink" title="四.能触发尾调用优化的方法："></a>四.能触发尾调用优化的方法：</h3><ul><li>函数调用: <code>func()</code></li><li>方法调用: <code>obj.method()</code></li><li>通过 <code>call()</code> 或 <code>apply()</code></li></ul><h3 id="五-下列-f-和-g-能触发尾调用优化的有："><a href="#五-下列-f-和-g-能触发尾调用优化的有：" class="headerlink" title="五.下列 f() 和 g() 能触发尾调用优化的有："></a>五.下列 <code>f()</code> 和 <code>g()</code> 能触发尾调用优化的有：</h3><ul><li><code>const a = x =&gt; x ? f() : g()</code><br><code>f()</code> 和 <code>g()</code>都可以</li><li><p><code>const a = x =&gt; f() || g()</code><br><code>f()</code> 不可以，<code>g()</code> 可以，因为上面的代码与以下代码一样：  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = f()</span><br><span class="line">    <span class="keyword">if</span> (tmp) &#123;</span><br><span class="line">        <span class="keyword">return</span> tmp</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> f()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>const a = x =&gt; f() &amp;&amp; g()</code><br><code>f()</code> 不可以，<code>g()</code> 可以，理由同上  </p></li><li><p><code>const a = () =&gt; (f(), g())</code><br><code>f()</code> 不可以，<code>g()</code> 可以，逗号运算符左边执行，右边返回  </p></li></ul><h3 id="六-一些简单应用"><a href="#六-一些简单应用" class="headerlink" title="六.一些简单应用"></a>六.一些简单应用</h3><ul><li><p>使用尾递归实现 <code>forEach()</code> 函数  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">forEach</span>(<span class="params">arr, callback, i=<span class="number">0</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &gt;= <span class="number">0</span> &amp;&amp; i &lt; arr.length) &#123;</span><br><span class="line">        callback(arr[i], i, arr)</span><br><span class="line">        <span class="keyword">return</span> forEach(arr, callback, i+<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现 <code>findIndex()</code> 函数  </p><pre><code class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">findIndex</span>(<span class="params">arr, callback, i=<span class="number">0</span></span>) </span>{  <span class="keyword">if</span> (i &gt;= <span class="number">0</span> &amp;&amp; i &lt; arr.length) {      <span class="keyword">if</span> (callback(arr[i])) {          <span class="keyword">return</span> i      }      <span class="keyword">return</span> findIndex(arr, target, i+<span class="number">1</span>)  } <span class="keyword">else</span> {      <span class="keyword">return</span> <span class="number">-1</span>  }}</code></pre><h3 id="七、一些说明"><a href="#七、一些说明" class="headerlink" title="七、一些说明"></a>七、一些说明</h3><p>函数式编程是无法实现循环的，因为 <code>for</code> 使用可变的状态作为计数器，违反其不修改状态的原则，所以只能使用递归来解决迭代问题。如果能做到尾递归优化，递归并不是魔鬼。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、-什么是递归&quot;&gt;&lt;a href=&quot;#一、-什么是递归&quot; class=&quot;headerlink&quot; title=&quot;一、 什么是递归&quot;&gt;&lt;/a&gt;一、 什么是递归&lt;/h3&gt;&lt;p&gt;递归（英语：Recursion），又译为递回，在数学与计算机科学中，是指在函数的定义中使用函数自身的方法。&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="git@github.com:lixpng/lixpng.github.io.git/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>CSS3学习笔记(二)</title>
    <link href="git@github.com:lixpng/lixpng.github.io.git/2016/10/03/css3-2/"/>
    <id>git@github.com:lixpng/lixpng.github.io.git/2016/10/03/css3-2/</id>
    <published>2016-10-03T12:02:04.000Z</published>
    <updated>2018-11-22T14:15:36.537Z</updated>
    
    <content type="html"><![CDATA[<p>css3学习笔记<br><a id="more"></a></p><h4 id="1-多栏布局"><a href="#1-多栏布局" class="headerlink" title="1.多栏布局"></a>1.多栏布局</h4><p>  首先先说说用<code>float</code>和<code>position</code>布局的缺点：就是在布局时水平排列的div是互相独立的，即如果两个div的内容的高度不一样，两个div的底部不能对齐，导致页面中出现空白；其次，float的消除浮动也比较烦。css3中的多栏布局决解了这些问题。<br>  使用<code>column-count</code>可使元素中的内容分栏显示,不会出现底部不对齐的情况<br>  <code>column-width</code>可指定每一栏的宽度(个人觉得一般不用，指定总宽度即可)，但宽度都是一样的<br>  <code>column-gap</code>可指定每栏间的间隔<br>  <code>column-rule</code>可在栏与栏之间增加一条间隔线，其语法与border的语法一样</p><h4 id="2-盒布局"><a href="#2-盒布局" class="headerlink" title="2.盒布局"></a>2.盒布局</h4><p>  盒布局也是解决<code>float</code>和<code>position</code>布局缺点的方法，但比多栏布局更适合用于整体布局。因为多栏布局的每一栏的宽度是一样的，故很难用于整体布局，一般用于文章的分栏显示。但盒布局就解决了这个问题。<br>  给容器设置<code>display:box</code>,就可实现分栏显示了。<br>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:1000px"</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span></span><br><span class="line">    文本1</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span></span><br><span class="line">    文本2</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div3"</span>&gt;</span></span><br><span class="line">    文本3</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">.container&#123;</span><br><span class="line">  display: box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>  以上代码中的三个子div便会分栏显示，但它们的总宽度并不等于container的宽度。此时就需要弹性盒布局了。如果给第二个子div增加样式：<br>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div2</span>&#123;</span><br><span class="line">  <span class="attribute">box-flex</span>:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>  此div即会弹性伸缩宽度，其宽度等于容器的宽度减去div1和div3的宽度。也可指定多个div的box-flex属性。<br>  box-flex属性的值代表的是其占的空白宽度，即先把容器的宽度减去div1 div2 div3 的宽度得到空白的宽度，再将其按比率分给设定了box-flex的div。<br>  弹性布局可改变元素的显示顺序，通过设置元素的<code>box-ordinal-group</code>，如：<br>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div1</span>&#123;</span><br><span class="line">  <span class="attribute">box-ordinal-group</span>:<span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div2</span>&#123;</span><br><span class="line">  <span class="attribute">box-ordinal-group</span>:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div3</span>&#123;</span><br><span class="line">  <span class="attribute">box-ordinal-group</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>  结果是div2在左边，div3居中，div1在右边<br>  弹性布局可改变元素的排列顺序，通过设置<code>box-orient</code>属性的值为<code>vertical</code>(垂直)或<code>horizontal</code>(水平)<br>  还可通过设置box-pack box-align改变子元素的对齐方式<br>  以上说的css3中属性或值要加上-webkit-  -moz-  -o-  前缀，且这是2009年草案的语法。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;css3学习笔记&lt;br&gt;
    
    </summary>
    
    
      <category term="css" scheme="git@github.com:lixpng/lixpng.github.io.git/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>CSS3学习笔记(一)</title>
    <link href="git@github.com:lixpng/lixpng.github.io.git/2016/10/02/css3-1/"/>
    <id>git@github.com:lixpng/lixpng.github.io.git/2016/10/02/css3-1/</id>
    <published>2016-10-02T12:27:37.000Z</published>
    <updated>2018-11-22T14:15:36.536Z</updated>
    
    <content type="html"><![CDATA[<p>css3学习笔记<br><a id="more"></a></p><h4 id="1-常见伪类选择器"><a href="#1-常见伪类选择器" class="headerlink" title="1.常见伪类选择器"></a>1.常见伪类选择器</h4><p>(1)<code>:first-child</code> <code>:last-child</code> <code>:first-letter</code> <code>:first-line</code> <code>:nth-child(n)</code> <code>:after</code> <code>:later</code>  <code>:only-child</code><br><code>:nth-last-child(n)</code> <code>:nth-child(odd)</code><br><code>:nth-child(even)</code><br>(2)<code>:nth-of-type(n)</code> <code>:nth-last-of-type(n)</code>  注意这个与<code>:nth-child(n)</code>的区别是这个会选择同类的元素进行计数,如以下代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h6</span>&gt;</span>h1<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h6</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>p3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h6</span>&gt;</span>h3<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>如果用<code>p:nth-child(n)</code>会把<code>&lt;h6&gt;</code>标签一起计算进去，比如:<code>p:nth-child(2)</code>得到的是第一个<code>&lt;h6&gt;</code>标签，但用<code>nth-of-type(2)</code>就是第二个<code>&lt;p&gt;</code>标签<br>(3)<code>nth-child(αn+β)</code>可实现循环使用样式<br>若有如下列表：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项目<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项目<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项目<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项目<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项目<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项目<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">li:nth-child(3n+1)&#123;</span></span><br><span class="line"><span class="undefined">    color: red;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">li:nth-child(3n+1)&#123;</span></span><br><span class="line"><span class="undefined">    color: blue;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">li:nth-child(3n+1)&#123;</span></span><br><span class="line"><span class="undefined">    color: yellow;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>列表会以3个为一组文本颜色以红 蓝 黄 进行循环<br>(4)UI状态伪类选择器：<br><code>:hover</code> <code>:active</code> <code>:focus</code> <code>:enabled</code> <code>:disabled</code>  <code>:read-only</code> <code>:read-write</code> <code>:checked</code> <code>::selection</code><br><code>:default</code> <code>:indeterminate</code><br>(5)四个基本的结构性伪类选择器:<br>:root   :not   :empty   :target<br>(6)通用兄弟元素选择器：<code>子元素~子元素之后的同级兄弟元素</code>,如<code>div~p</code>为与div同级且在div之后的所有p标签元素<br>(7)使用after before在页面中插入内容：<br>可插入文字 图片等  还可编号如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>列表<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>列表<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>列表<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>列表<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>列表<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">p:before&#123;</span></span><br><span class="line"><span class="undefined">content: counter(myCounter,upper-alpha)'.';</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">p&#123;</span></span><br><span class="line"><span class="undefined">counter-increment: myCounter</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>会在p标签前加上以大写字母排序的编号（编号还可嵌套）</p><h4 id="2-文字与文体相关样式"><a href="#2-文字与文体相关样式" class="headerlink" title="2. 文字与文体相关样式"></a>2. 文字与文体相关样式</h4><p>(1)<code>text-shadow</code>加阴影<br>(2)文字换行<code>word-break:break-all</code>与<code>word-wrap:break-word</code>的区别：<br>前者是不管单词多长，只要这一行还没填满，就要填满，便会导致单词内换行；但后者是只有单词过长，一整行还不足以容纳整个单词时才会在单词内换行。<br>(3)<code>@font-face</code>使用服务端字体或客户端字体<br>(4)<code>font-size-adjust</code>可实现换字体种类，但字的大小不变</p><h4 id="3-盒相关样式"><a href="#3-盒相关样式" class="headerlink" title="3.盒相关样式"></a>3.盒相关样式</h4><p>(1)<code>inline-block</code>可代替<code>float</code>实现水平排列的列<br>注意用这个方法会使<strong>两列之间有间隙</strong>，原因是在写代码时标签之间换行了，具体解决方法可看此<a href="http://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/" title="怎样去除标签间的间隙" target="_blank" rel="noopener">博客</a><br>(2)<code>inline-table</code>可实现在表格等块级标签两侧加文字，使其处于同一行<br>(3)<code>overflow</code>有四种处理方式auto scroll hidden visible(与不设置时一样)<br><code>text-overflow</code>属性设为<code>hidden</code>时可使水平方向超出的文字后面有一个省略号<br>(4)指定针对元素的宽高计算方法<code>box-sizing</code>三种值:<code>border-box</code> <code>padding-box</code> <code>content-box</code></p><h4 id="4-与边框和背景相关样式"><a href="#4-与边框和背景相关样式" class="headerlink" title="4.与边框和背景相关样式"></a>4.与边框和背景相关样式</h4><p>(1)<code>background-clip</code>指定背景的显示范围<br>(2)<code>background-origin</code>指定背景<strong>图像</strong>的绘制起点<br>(3)<code>background-size</code>指定背景图片大小<br>(4)在一个元素中显示多个背景图像用逗号隔开<br>(5)<code>border-image</code>是把图片裁剪为九宫格，四个角上的不变，然后把四条边上的进行拉伸(stretch)、重复(repeat)或平铺(round)，中央区域图像也会进行伸缩</p><h4 id="5-transform变形"><a href="#5-transform变形" class="headerlink" title="5.transform变形"></a>5.transform变形</h4><p> 有四种变换方式，分别如下：<br> (1)<code>rotate()</code>旋转，参数为旋转角度<br> (2)<code>scale()</code>缩放，可指定两个参数，分别为垂直和水平方向的缩放倍率<br> (3)<code>translate()</code>移动，可指定两个参数，水平与垂直<br> (4)<code>skew()</code>倾斜，两参数，水平与垂直<br> (5) 注意<strong>变换顺序会影响最后的状态，因为移动是沿着边的垂直方向进行的</strong><br> (6)使用<code>transform-origin</code>指定变形的基准点。如<code>transform-origin(left top)</code></p><h4 id="6-Transitions过渡"><a href="#6-Transitions过渡" class="headerlink" title="6.Transitions过渡"></a>6.Transitions过渡</h4><p>(1)基本使用:<code>transition:property(对哪个属性进行平滑过渡) duration(用多长时间完成过渡) timing-function(用什么方法过渡)</code><br>(2)过渡多个属性值中间用逗号隔开<br>(3) 此方法的缺点是只能定义开始和结束的状态，动画进行时不能控制，所以有了后面的Animations</p><h4 id="7-Animations动画"><a href="#7-Animations动画" class="headerlink" title="7.Animations动画"></a>7.Animations动画</h4><p>(1)使用时先用<code>@keyframes name</code>定义关键帧集合然后通过<code>animation:name duration timing-function</code>等多个参数进行使用<br>(2)若不用<code>:hover</code>等状态选择器，直接把动画写在元素标签内，则动画会在打开页面是进行，如网页淡入效果：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> fadeIn&#123;</span><br><span class="line">0%&#123;</span><br><span class="line"><span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">100%&#123;</span><br><span class="line"><span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line"><span class="attribute">animation</span>: fadeIn <span class="number">2s</span> linear;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>(3)此外还有很多参数可自行查找API</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;css3学习笔记&lt;br&gt;
    
    </summary>
    
    
      <category term="css" scheme="git@github.com:lixpng/lixpng.github.io.git/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>html5 canvas 实现的小画板</title>
    <link href="git@github.com:lixpng/lixpng.github.io.git/2016/08/27/2016-8-27/"/>
    <id>git@github.com:lixpng/lixpng.github.io.git/2016/08/27/2016-8-27/</id>
    <published>2016-08-27T06:30:05.000Z</published>
    <updated>2018-11-22T14:15:36.536Z</updated>
    
    <content type="html"><![CDATA[<h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><a id="more"></a><p>lineTo() stroke()方法实现画画功能,设置globalCompositeOperation = “destination-out”(像素合成方式)实现橡皮擦功能,getImageData() putImageData()实现撤消功能,代码如下:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>绘画工具<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">#pictureCanvas&#123;</span></span><br><span class="line"><span class="undefined">border: 1px solid #ccc;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.pictureCanvasDiv,.btnGroup&#123;</span></span><br><span class="line"><span class="undefined">width: 100%;</span></span><br><span class="line"><span class="undefined">text-align: center;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pictureCanvasDiv"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"pictureCanvas"</span> <span class="attr">height</span>=<span class="string">"500"</span> <span class="attr">width</span>=<span class="string">"800"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btnGroup"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"startPicture"</span>&gt;</span>开始绘画<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"reBack"</span> <span class="attr">disabled</span>=<span class="string">""</span>&gt;</span>撤销<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"xiangPiCa"</span> <span class="attr">disabled</span>&gt;</span>橡皮擦<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"pen"</span> <span class="attr">disabled</span>&gt;</span>画笔<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"color"</span> <span class="attr">name</span>=<span class="string">"color"</span> <span class="attr">id</span>=<span class="string">"penColor"</span> <span class="attr">disabled</span>&gt;</span></span><br><span class="line">画笔宽度:</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"penWidth"</span> <span class="attr">disabled</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">宽笔画封顶形状:</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"penCloseTopStyle"</span> <span class="attr">disabled</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"round"</span>&gt;</span>延长笔画宽度的一半半圆结束<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"butt"</span>&gt;</span>矩形直接结束<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"square"</span>&gt;</span>延长笔画宽度的一半矩形结束<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">window.onload = function () &#123;</span></span><br><span class="line"><span class="undefined">//加载画笔宽度单选框</span></span><br><span class="line"><span class="undefined">for (var _i = 1; _i &lt;= 20;_i++) &#123;</span></span><br><span class="line"><span class="undefined">var option = document.createElement("option");</span></span><br><span class="line"><span class="undefined">option.innerText = _i;</span></span><br><span class="line"><span class="undefined">document.getElementById("penWidth").appendChild(option);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">for (var _a = 1; _a &lt; 10;_a++) &#123;</span></span><br><span class="line"><span class="undefined">var _option = document.createElement("option");</span></span><br><span class="line"><span class="undefined">_option.innerText = "0." + _a;</span></span><br><span class="line"><span class="undefined">document.getElementById("penWidth").appendChild(_option);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">var pictureArray = [];</span></span><br><span class="line"><span class="undefined">//开始画画</span></span><br><span class="line"><span class="undefined">document.getElementById("startPicture").onclick = function () &#123;</span></span><br><span class="line"><span class="undefined">//移除按钮的不可点状态</span></span><br><span class="line"><span class="undefined">var disabled = document.getElementsByClassName("btnGroup")[0].children;</span></span><br><span class="line"><span class="undefined">for (var _x = 0; _x &lt; disabled.length; _x++) &#123;</span></span><br><span class="line"><span class="undefined">disabled[_x].removeAttribute("disabled");</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">if(!pictureArray.length)&#123;</span></span><br><span class="line"><span class="undefined">document.getElementById("reBack").setAttribute("disabled","");//判断是否可撤销</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">this.setAttribute("disabled","");//开始绘画按钮禁用</span></span><br><span class="line"><span class="undefined">var canvas = document.getElementById("pictureCanvas");</span></span><br><span class="line"><span class="undefined">var c = canvas.getContext("2d");</span></span><br><span class="line"><span class="undefined">var flag = true;//据此判断是否启用mousemove事件</span></span><br><span class="line"><span class="undefined">c.lineCap = "round";//默认圆形封顶</span></span><br><span class="line"><span class="undefined">document.getElementById("pen").onclick = function () &#123;</span></span><br><span class="line"><span class="undefined">c.restore();//恢复画布属性状态</span></span><br><span class="line"><span class="undefined">canvas.style.cursor = "pointer";</span></span><br><span class="line"><span class="undefined">//切换画笔形态</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined">document.getElementById("penColor").onchange = function () &#123;</span></span><br><span class="line"><span class="undefined">c.strokeStyle = this.value;//画笔颜色</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined">document.getElementById("penWidth").onchange = function () &#123;</span></span><br><span class="line"><span class="undefined">c.lineWidth = this.value;//画笔宽度</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined">document.getElementById("penCloseTopStyle").onchange = function () &#123;</span></span><br><span class="line"><span class="undefined">c.lineCap = this.value;//画笔封顶形状</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined">canvas.onmousedown = function (event) &#123;</span></span><br><span class="line"><span class="undefined">pictureArray.push(c.getImageData(0,0,canvas.width,canvas.height));//当前图案进栈</span></span><br><span class="line"><span class="undefined">flag = true;</span></span><br><span class="line"><span class="undefined">c.beginPath();</span></span><br><span class="line"><span class="undefined">c.moveTo(event.clientX - canvas.getBoundingClientRect().left,event.clientY - canvas.getBoundingClientRect().top);</span></span><br><span class="line"><span class="undefined">canvas.onmousemove = function (e) &#123;</span></span><br><span class="line"><span class="undefined">if (flag) &#123;</span></span><br><span class="line"><span class="undefined">c.lineTo(e.clientX - canvas.getBoundingClientRect().left,e.clientY - canvas.getBoundingClientRect().top);//路径</span></span><br><span class="line"><span class="undefined">c.stroke();//勾勒</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">canvas.onmouseup = function () &#123;</span></span><br><span class="line"><span class="undefined">flag = false;</span></span><br><span class="line"><span class="undefined">c.closePath();</span></span><br><span class="line"><span class="undefined">if(pictureArray.length)&#123;</span></span><br><span class="line"><span class="undefined">document.getElementById("reBack").removeAttribute("disabled");//判断是否可撤销</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined">document.getElementById("xiangPiCa").onclick = function () &#123;</span></span><br><span class="line"><span class="undefined">c.save();//保存当前画布属性状态</span></span><br><span class="line"><span class="undefined">c.globalCompositeOperation = "destination-out";//设置合成属性，使其可以擦除像素</span></span><br><span class="line"><span class="undefined">c.globalAlpha = 1;//设置透明度</span></span><br><span class="line"><span class="undefined">c.lineWidth = 10;//橡皮擦宽度</span></span><br><span class="line"><span class="undefined">canvas.style.cursor = "crosshair";</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined">document.getElementById("reBack").onclick = function () &#123;</span></span><br><span class="line"><span class="undefined">if(pictureArray.length)&#123;</span></span><br><span class="line"><span class="undefined">c.putImageData(pictureArray.pop(),0,0);//出栈把图案放到画布上</span></span><br><span class="line"><span class="undefined">if(!pictureArray.length)&#123;</span></span><br><span class="line"><span class="undefined">document.getElementById("reBack").setAttribute("disabled","");//判断是否可撤销</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;代码如下&quot;&gt;&lt;a href=&quot;#代码如下&quot; class=&quot;headerlink&quot; title=&quot;代码如下&quot;&gt;&lt;/a&gt;代码如下&lt;/h3&gt;
    
    </summary>
    
    
      <category term="html" scheme="git@github.com:lixpng/lixpng.github.io.git/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>js jquery上传图片展示及传送后台</title>
    <link href="git@github.com:lixpng/lixpng.github.io.git/2016/07/08/2016-7-8-17/"/>
    <id>git@github.com:lixpng/lixpng.github.io.git/2016/07/08/2016-7-8-17/</id>
    <published>2016-07-08T09:12:57.000Z</published>
    <updated>2018-11-22T14:15:36.536Z</updated>
    
    <content type="html"><![CDATA[<h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下:"></a>代码如下:</h3><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>图片上传<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">id</span>=<span class="string">"submitHead"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/10.jpg"</span> <span class="attr">class</span>=<span class="string">"headPortraitImg"</span> <span class="attr">id</span>=<span class="string">"userPicture"</span> <span class="attr">style</span>=<span class="string">"min-width200px;min-heigth:200px;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"headInput"</span> <span class="attr">style</span>=<span class="string">"display:none"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    $(function()&#123;</span></span><br><span class="line"><span class="undefined">  var submitHead = $("#submitHead"),</span></span><br><span class="line"><span class="undefined">      headInput = $ ("#headInput");</span></span><br><span class="line"><span class="undefined">      //把a标签的点击事件模拟给input</span></span><br><span class="line"><span class="undefined">      submitHead.click(function()&#123;</span></span><br><span class="line"><span class="undefined">        if (headInput) &#123;</span></span><br><span class="line"><span class="undefined">          $(headInput).click();</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">        $(headInput).change(function   () &#123;</span></span><br><span class="line"><span class="undefined">          var files = this.files;</span></span><br><span class="line"><span class="undefined">          var img = $("#userPicture");</span></span><br><span class="line"><span class="undefined">          $(img).attr("src",window.URL.createObjectURL(files[0]));</span></span><br><span class="line"><span class="undefined">          var reader = new FileReader();</span></span><br><span class="line"><span class="undefined">          reader.readAsDataURL(files[0]);</span></span><br><span class="line"><span class="undefined">          reader.onload = function (data) &#123;</span></span><br><span class="line"><span class="undefined">            var  headPictureCode = data.currentTarget.result;//这就是上传的图片的base64码，把此数据返回给后台即可</span></span><br><span class="line"><span class="undefined">            console.log(headPictureCode);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;代码如下&quot;&gt;&lt;a href=&quot;#代码如下&quot; class=&quot;headerlink&quot; title=&quot;代码如下:&quot;&gt;&lt;/a&gt;代码如下:&lt;/h3&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="git@github.com:lixpng/lixpng.github.io.git/tags/javascript/"/>
    
  </entry>
  
</feed>
